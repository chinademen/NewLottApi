package lib

import (
	"common"
	Lmodels "lotteryJobs/models"
	"math"
	"strings"
)

// 不同统计类型统计号码分布数据时, 在data数组中的起始下标
var IndexsMap = map[string]int{
	"5":  7,
	"4":  6,
	"3":  5,
	"3f": 5,
	"3e": 5,
	"2f": 5,
	"2e": 5,
}

// 不同统计类型实际需要遍历的标准列数(球个数 + 分布 + [二星的跨度]) * 10 + [1 (二星的对子)]
var CellNumsMap = map[string]int{
	"5":  60,
	"4":  50,
	"3":  40,
	"3f": 40,
	"3e": 40,
	"2f": 41,
	"2e": 41,
}

// 不同统计类型号码截取的起始下标
var PositionsMap = map[string]int{
	"5":  0,
	"4":  1,
	"3":  0,
	"3f": 0,
	"3e": 2,
	"2f": 0,
	"2e": 3,
}

var ClipsMap = [2]string{"", " "}

type UserTrend struct{}

/**
 * [getTrendDataByParams 根据查询参数获取奖期开奖号码, 并生成分析后的走势数据]
 * @param  [integer] $iLotteryId [彩种id]
 * @param  [integer] $iNumType   [位数]
 * @param  [integer] $iBeginTime [起始时间秒数]
 * @param  [integer] $iEndTime   [结束时间秒数]
 * @param  [integer] $iCount     [记录条数]
 * @return [Array]               [返回分析数据]
 */
func (ut *UserTrend) GetTrendDataByParams(lotteryId, numType, beginTime, endTime,
	count string) (int, []interface{}, []map[int]int, map[int]int) {

	isSuccess := 0 //0=获取失败，1=成功、
	data := []interface{}{}
	statistics := []map[int]int{}
	aOmissionBarStatus := map[int]int{}

	IssuesList := Lmodels.Issues.GetIssuesByParams(lotteryId, beginTime, endTime, count)
	if len(IssuesList) == 0 {
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	iDataLen := len(IssuesList) //数据库取出的长度

	oLottery := Lmodels.Lottery.GetInfo(lotteryId)

	iType := 99
	typeInt, typeErr := common.Str2Int(oLottery["type"])
	if typeErr == nil {
		iType = typeInt
	}

	if iType == 99 {
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	if _, ok1 := IndexsMap[numType]; ok1 == false {
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	if _, ok2 := CellNumsMap[numType]; ok2 == false {
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	if iType-1 < 0 || iType-1 > len(ClipsMap) { //不属于ClipsMap数组的下标=错误
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	if _, ok4 := PositionsMap[numType]; ok4 == false {
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	iIndex := IndexsMap[numType]

	iCellNum := 66
	if iType == 1 {
		iCellNum = CellNumsMap[numType]
	}

	iBallNum := 99
	sBallNum := common.Substr(numType, 0, 1)
	sBallNumInt, sBallNumErr := common.Str2Int(sBallNum)
	if sBallNumErr == nil {
		iBallNum = sBallNumInt
	}

	if iBallNum == 99 {
		return isSuccess, data, statistics, aOmissionBarStatus
	}

	data, statistics, aOmissionBarStatus = ut.GenerateTrendData(IssuesList, numType, iDataLen, iType, iIndex, iCellNum, iBallNum)
	isSuccess = 1

	return isSuccess, data, statistics, aOmissionBarStatus
}

/**
 * [generateTrendData 生成走势数据]
 * @param  &      $data               [奖期数据的引用]
 * @param  &      $statistics         [统计数据的引用]
 * @param  &      $hotAndCold         [号温数据的引用]
 * @param  &      $aOmissionBarStatus [遗漏条数据的引用]
 * @param  [Integer] $iNumType        [号码类型]
 * @return [type]                     [description]
 */
func (ut *UserTrend) GenerateTrendData(IssuesList []map[string]string, iNumType string,
	iDataLen, iType, iIndex, iCellNum, iBallNum int) ([]interface{}, []map[int]int, map[int]int) {

	sClip := ClipsMap[iType-1]

	iCount := 11
	if iType == 1 {
		iCount = 10
	}

	tempOmissionForPair := 0
	tempOmissionForRange := map[int]int{}
	//	tempOmissionForNumberStyle := map[int]int{}

	// 根据中奖号码个数初始化待填充的数组
	switch iBallNum {

	// 二星对子遗漏和跨度遗漏
	case 2:

		tempOmissionForPair = 0
		tempOmissionForRange = common.ArrayFillIntTrue(0, iCount, 0)
		break

		// 豹子, 组三, 组六的号码分布遗漏
	case 3:

		//		tempOmissionForNumberStyle = common.ArrayFillIntTrue(0, iCount, 0)
		break

	}

	tempOmissionForDistribution := common.ArrayFillIntTrue(0, iCount, 0)

	// -------------------start 统计数据--------------------
	iAdditional := 0 // 3星额外有豹子 组三 组六的统计列
	if iBallNum == 3 {
		iAdditional = 3
	}

	iColumnNum := iCellNum + iAdditional
	aTimes := common.ArrayFillIntTrue(0, iColumnNum, 0)
	aAvgOmission := common.ArrayFillIntTrue(0, iColumnNum, 0)
	aMaxOmission := common.ArrayFillIntTrue(0, iColumnNum, 0)
	aMaxContinous := common.ArrayFillIntTrue(0, iColumnNum, 0)
	aMaxContinousCache := common.ArrayFillIntTrue(0, iColumnNum, 0)
	aOmissionBarStatus := common.ArrayFillIntTrue(0, iBallNum*iCount, -1)

	aLostTimes := map[int]int{}
	// -------------------end 统计数据----------------------

	data := []interface{}{}
	// 遍历统计数据, 需要依据页面展现顺序，依次填充数据
	for key1, oIssue := range IssuesList {
		data1 := []interface{}{} //第一层
		//		data1[key1] = [2]string{oIssue["issue"], oIssue["wn_number"]}
		data1 = append(data1, oIssue["issue"])
		data1 = append(data1, oIssue["wn_number"])

		sBallsInit := oIssue["wn_number"]
		sBalls := ""

		// 如果是时时彩, 先截取号码位数, 5星/4星/前3/后3/前2/后2
		if len(sClip) > 0 {
			iPos := PositionsMap[iNumType]
			sBalls = common.Substr(sBallsInit, iPos, iBallNum)
		}

		// 如果是时时彩, 则按号码位数分割, 11选5则按空格分割
		aBalls := strings.Split(sBalls, "")
		if len(sClip) > 0 {
			aBalls = strings.Split(sBalls, sClip)
		}

		iBallsLen := len(aBalls)

		// 遍历每一位号码，生成每一位号码在0-9数字上的分布数据
		for key2, value := range aBalls {

			valueInt, valueErr := common.Str2Int(value)
			if valueErr != nil {
				continue
			}

			arr := ut.MakeRowData(key2, key1, valueInt, iCount, iType, aOmissionBarStatus, aLostTimes, aTimes, aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache)

			data1 = append(data1, arr)
		}

		switch iBallNum {

		// 二星对子遗漏和跨度遗漏
		case 2:

			data1[iIndex-1] = countPairPattern(aBalls)
			data1 = append(data1, countNumberDistribution(aBalls, iBallsLen, iType))
			data1 = append(data1, countNumberRangeTrendPattern(aBalls))
			data1 = append(data1, countNumberSumPattern(aBalls))

			data1, tempOmissionForPair = countPairAndRangeOmission(data1, tempOmissionForPair, tempOmissionForRange, aTimes, aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache)

			data1 = countDistributionOmission(data1, iIndex, iCount, iBallNum, tempOmissionForDistribution, aTimes, aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache)

			break

		default:

			data1 = append(data1, countNumberDistribution(aBalls, iBallsLen, iType))
			data1 = countDistributionOmission(data1, iIndex, iCount, iBallNum, tempOmissionForDistribution, aTimes, aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache)

		}

		data = append(data, data1)
	}

	iLenTimes := len(aAvgOmission)

	for i := 0; i < iLenTimes; i++ {

		if aAvgOmission[i] == 0 {
			aAvgOmission[i] = iDataLen + 1
		} else {
			aAvgOmission[i] = int(math.Floor(float64(iDataLen) / float64(aAvgOmission[i])))
		}
	}

	statistics := []map[int]int{}
	statistics = append(statistics, aTimes)
	statistics = append(statistics, aAvgOmission)
	statistics = append(statistics, aMaxOmission)
	statistics = append(statistics, aMaxContinous)

	return data, statistics, aOmissionBarStatus
}

/**
 * [makeRowData 生成一组号码以及号码属性, 通过遍历0-9数字的方式]
 * @param  [Int] $iNum          [万千百十个位]
 * @param  [String] $sBall      [某位上的开奖号码值]
 * @param  [Array] $aLostTimes  [号码遗漏次数缓存]
 * @return [Array]              [一条奖期的开奖号码分析属性数组，格式是：]
 *       [
 *         遗漏次数,
 *         当前开奖号数字 (当前位的号码数字),
 *         号温 (1:冷号, 2:温号, 3:热号),
 *         遗漏条 (开奖号码数字是否是最后一次出现该号码数字,是为1,否为0)
 *       ]

makeRowData($iNum, $key1, $sBall, & $aOmissionBarStatus, & $aLostTimes, & $aTimes, & $aAvgOmission, & $aMaxOmission, & $aMaxContinous, & $aMaxContinousCache)
php是传址引用, golang的map类型 本身就是传址
*/
func (ut *UserTrend) MakeRowData(iNum, key1, sBall, iCount, iType int,
	aOmissionBarStatus, aLostTimes, aTimes, aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache map[int]int) [][]int {

	result := make([][]int, 1)

	iAdditional := iNum
	if iType == 1 {
		iAdditional = 0
	}

	for i := 0; i < iCount; i++ {

		iOmission := 0

		iNumber := i + 1
		if iType == 1 {
			iNumber = i
		}

		index := iNum*10 + iAdditional + i

		//当前号码为开奖号码数字
		if sBall == iNumber {

			aLostTimes[index] = 0

			aTimes[index]++
			aMaxContinousCache[index]++
			aOmissionBarStatus[index] = key1

		} else {

			if _, ok1 := aLostTimes[index]; ok1 == true {

				aLostTimes[index]++

			} else {

				aLostTimes[index] = 1
			}

			iOmission = 1

			aMaxOmission[index] = PHPMaxInt(aLostTimes[index], aMaxOmission[index])
			aMaxContinousCache[index] = 0
		}

		result1 := make([]int, 1)
		result1 = append(result1, aLostTimes[index])
		result1 = append(result1, sBall)
		result1 = append(result1, 1)
		result1 = append(result1, iOmission)
		result = append(result, result1)
	}
	return result
}

func PHPMaxInt(i1, i2 int) int {

	if i1 > i2 {
		return i1
	}
	return i2
}

/**
 * [countNumberDistribution 号码分布 格式: [遗漏次数, 当前数字, 重复次数]]
 * @param  [Array] $aBalls          [开奖号码]
 * @param  [Int]   $iBallsLen       [开奖号码位数]
 * @return [Array]                  [号码分布统计数据数组]
 */
func countNumberDistribution(aBalls []string, iBallsLen, iType int) [][]int {
	times := [][]int{}

	iCount := 12
	iStart := 1
	if iType == 1 {
		iCount = 10
		iStart = 0
	}

	for iStart = iStart; iStart < iCount; iStart++ {

		num := 0
		sStart := common.InterfaceToString(iStart)

		for j := 0; j < iBallsLen; j++ {

			if aBalls[j] == sStart {
				num++
			}
		}

		iInArr := 1
		if common.InArray(sStart, aBalls) == true {
			iInArr = 0
		}

		times1 := []int{iInArr, iStart, num}
		times = append(times, times1)
	}
	return times
}

/**
 * [countPairPattern 对子]
 * @param  [Array] $aBalls [开奖号码分解数组]
 * @return [Array]         [遗漏值]
 */
func countPairPattern(aBalls []string) int {

	if aBalls[0] != aBalls[1] {
		return 1
	}
	return 0
}

/**
 * [countNumberRangeTrendPattern 跨度走势]
 * @param  [Array] $aBalls [开奖号码分解数组]
 * @return [Array]         [遗漏值, 当前球内容, 重复次数]
 */
func countNumberRangeTrendPattern(aBalls []string) [][]int {
	times := [][]int{}

	iBalls0, iBalls0Err := common.Str2Int(aBalls[0])
	iBalls1, iBalls1Err := common.Str2Int(aBalls[1])
	if iBalls0Err != nil || iBalls1Err != nil {
		return times
	}

	kd := 0
	if iBalls0 > iBalls1 {
		kd = iBalls0 - iBalls1
	} else {
		kd = iBalls1 - iBalls0
	}

	for i := 0; i < 10; i++ {

		notEqu := 1
		if i == kd {
			notEqu = 0
		}
		times1 := []int{notEqu, i}
		times = append(times, times1)
	}
	return times
}

/**
 * [countNumberSumPattern 和值]
 * @param  [Array] $aBalls [开奖号码分解数组]
 * @return [Array]         [遗漏值]
 */
func countNumberSumPattern(aBalls []string) int {
	return common.ArraySum(aBalls)
}

/**
 * [countPairAndRangeOmission 对子, 跨度走势遗漏]
 * @param  [Array]   $data       [待分析的数据]
 * @param  [Integer] $i          [数据数组索引值]
 * @param  [Array]   $tempOmissionForPair  [对子走势遗漏值]
 * @param  [Array]   $tempOmissionForRange [跨度走势遗漏值]
 * @return [Array]               [分析后的数据]
 */
func countPairAndRangeOmission(data1 []interface{}, tempOmissionForPair int,
	tempOmissionForRange, aTimes, aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache map[int]int) ([]interface{}, int) {

	iPairColumnIndex := 20
	iRangeColumnIndex := 31

	// 对子走势遗漏
	if data1[4] == 0 {
		tempOmissionForPair++
	} else {
		tempOmissionForPair = 0
	}
	data1[4] = tempOmissionForPair

	// ---------对子的4项统计
	if data1[4] == 0 {

		aTimes[iPairColumnIndex]++
		aMaxContinousCache[iPairColumnIndex]++

		if aMaxContinousCache[iPairColumnIndex] > aMaxContinous[iPairColumnIndex] {
			aMaxContinous[iPairColumnIndex] = aMaxContinousCache[iPairColumnIndex]
		} else {
			aMaxContinous[iPairColumnIndex] = 0
		}

	} else {

		aMaxContinousCache[iPairColumnIndex] = 0
	}

	if tempOmissionForPair == 0 {

		aAvgOmission[iPairColumnIndex]++
	}

	if tempOmissionForPair > aMaxOmission[iPairColumnIndex] {
		aMaxOmission[iPairColumnIndex] = tempOmissionForPair
	} else {
		aMaxOmission[iPairColumnIndex] = 0
	}

	data6 := data1[6].([][]int)
	// 跨度走势遗漏
	for n := 0; n < 10; n++ {

		m := iRangeColumnIndex + n

		if data6[n][0] > 0 {
			tempOmissionForRange[n]++
		} else {
			tempOmissionForRange[n] = 0
		}

		data6[n][0] = tempOmissionForRange[n]

		// 跨度的4项统计
		if data6[n][0] == 0 {
			aTimes[m]++
			aMaxContinousCache[m]++

			if aMaxContinousCache[m] > aMaxContinous[m] {
				aMaxContinous[m] = aMaxContinousCache[m]
			} else {
				aMaxContinous[m] = 0
			}

		} else {
			aMaxContinousCache[m] = 0
		}

		if tempOmissionForRange[n] == 0 {
			aAvgOmission[m]++
		}

		if tempOmissionForRange[n] > aMaxOmission[m] {
			aMaxOmission[m] = tempOmissionForRange[n]
		} else {
			aMaxOmission[m] = 0
		}

	}
	data1[6] = data6

	return data1, tempOmissionForPair
}

/**
 * [countDistributionOmission 号码分布的遗漏次数]
 * @param  [Array]   $data     [统计数据]
 * @param  [Integer] $i        [数据记录的循环索引]
 * @param  [Int]     $tempOmissionForDistribution     [号码分布的遗漏次数统计缓存]
 * @return [Array]   $data     [分析后的统计数据]
 */
func countDistributionOmission(data1 []interface{}, iIndex, iCount, iBallNum int, tempOmissionForDistribution, aTimes,
	aAvgOmission, aMaxOmission, aMaxContinous, aMaxContinousCache map[int]int) []interface{} {

	iBallNumQeu2 := 0
	if iBallNum == 2 {
		iBallNumQeu2 = 1
	}
	iDistributionStart := iBallNum*10 + iBallNumQeu2

	dataIndex := [][]int{}
	if len(data1) >= iIndex {
		dataIndex = data1[iIndex].([][]int)
	}

	for n := 0; n < iCount; n++ {

		if dataIndex[n][2] == 0 {

			tempOmissionForDistribution[n]++
		} else {
			tempOmissionForDistribution[n] = 0
		}

		dataIndex[n][0] = tempOmissionForDistribution[n]

		// 号码分布的4项统计
		m := iDistributionStart + n
		if dataIndex[n][0] == 0 {
			aTimes[m] = aTimes[m] + dataIndex[n][2]
			aMaxContinousCache[m]++

			aMaxContinous[m] = PHPMaxInt(aMaxContinous[m], aMaxContinousCache[m])

		} else {
			aMaxContinousCache[m] = 0
		}

		if tempOmissionForDistribution[n] == 0 {
			aAvgOmission[m]++
		}

		aMaxOmission[m] = PHPMaxInt(aMaxOmission[m], tempOmissionForDistribution[n])

	}

	data1[iIndex] = dataIndex
	return data1
}
